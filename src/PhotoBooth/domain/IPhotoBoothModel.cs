#region PhotoBooth - MIT - (c) 2014 Patrick Bronneberg
/*
  PhotoBooth - an application to control a DIY photobooth

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.
  
  Copyright 2014 Patrick Bronneberg
*/
#endregion

using System;

namespace com.prodg.photobooth.domain
{
	/// <summary>
	/// Event args to use for signalling that an error occurred
	/// </summary>
	public class ErrorEventArgs : EventArgs
	{
		public ErrorEventArgs(string errorMessage)
		{
			Message = errorMessage;
		}

		public string Message { get; private set; }
	}

	/// <summary>
    /// Interface for the Photobooth application model.
    /// <para>
    /// The model maintains and controls the state of the photobooth by
    /// <list>
    /// <item>Providing a consistent workflow for the photobooth by handling event thrown by the hardware controls
    /// and by maintaining the correct state of the controls</item>
    /// <item>Maintaining data generated by the photobooth</item>
    /// </list>
    /// The model uses the Photobooth service to execute capturing and printing of pictures.
    /// </para>
    /// </summary>
    public interface IPhotoBoothModel: IDisposable
    {
		/// <summary>
		/// Occurs when error occurred.
		/// </summary>
		event EventHandler<ErrorEventArgs> ErrorOccurred;

		/// <summary>
        /// Event to signal that shutdown is requested
        /// </summary>
        /// <remarks>This event is added to provide a single location for handling all hardware controls, while keeping
        /// the responsibility of stopping the model at the application class</remarks>
        event EventHandler ShutdownRequested;

        /// <summary>
        /// Start the photobooth model
        /// </summary>
        void Start();

        /// <summary>
        /// Stop the photobooth model
        /// </summary>
        void Stop();
    }
}