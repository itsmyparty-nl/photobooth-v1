{
  "openapi": "3.0.1",
  "info": {
    "title": "Photobooth API",
    "description": "API to allow offloading of pictures from PhotoBooths, and displaying these on a web application ",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "paths": {
    "/events": {
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Creates a new event",
        "requestBody": {
          "description": "Event object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get Events by status",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/StatusEnum"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Deletes an event",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Find event by ID",
        "description": "Returns a single event",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return. Consider changing to string!",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Event"
        ],
        "summary": "Update an existing event",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated Event object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/download": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieve a zip containing all images for an event",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which all images should be retrieved",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "collage",
            "in": "query",
            "description": "only return collages if true, otherwise return all images",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "recreate",
            "in": "query",
            "description": "recreate zip export, even if a previous export exists",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Photobooth.API"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Create a session for an event",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which the session needs to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "session created for storing shots",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find sessions by Event ID",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which sessions needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{sessionId}": {
      "delete": {
        "tags": [
          "Session"
        ],
        "summary": "Delete session by ID",
        "description": "",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "ID of the event for which the session needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find session by ID",
        "description": "",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "ID of the session which needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionIndex}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find sessions for a specific event by the index of the session in this event",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which the session needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIndex",
            "in": "path",
            "description": "Index of the session in the event which needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/shot": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Get random session shots for an Event ID",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which sessions needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "isThumbnail",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "isCollage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionIndex}/shots": {
      "post": {
        "tags": [
          "Shot"
        ],
        "summary": "Create a shot for a session",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which the session needs to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIndex",
            "in": "path",
            "description": "Index of the session in the event for which the shot needs to be created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "the shot",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShotDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShotDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShotDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShotDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Shot"
        ],
        "summary": "Retrieve a shot for a session",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which the session needs to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIndex",
            "in": "path",
            "description": "Index of the session in the event for which the shot needs to be created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "thumbnail",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShotDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionIndex}/shots/{shotIndex}": {
      "get": {
        "tags": [
          "Shot"
        ],
        "summary": "Retrieve a shot for a session",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which the session needs to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIndex",
            "in": "path",
            "description": "Index of the session in the event for which the shot needs to be created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shotIndex",
            "in": "path",
            "description": "the shot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "thumbnail",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShotDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/sessions/{sessionIndex}/shots/{shotIndex}/image": {
      "get": {
        "tags": [
          "Shot"
        ],
        "summary": "Retrieve an image for a session",
        "description": "",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the event for which the session needs to be created",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sessionIndex",
            "in": "path",
            "description": "Index of the session in the event for which the shot needs to be created",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shotIndex",
            "in": "path",
            "description": "the shot",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/shots/{shotId}": {
      "get": {
        "tags": [
          "Shot"
        ],
        "summary": "Retrieve a shot",
        "description": "",
        "parameters": [
          {
            "name": "shotId",
            "in": "path",
            "description": "the shot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShotDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EventDTO": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isPublic": {
            "type": "boolean"
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "sessionCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "SessionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "allowShare": {
            "type": "boolean",
            "nullable": true
          },
          "collage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShotDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int64"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "isCollage": {
            "type": "boolean"
          },
          "image": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StatusEnum": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      }
    }
  }
}