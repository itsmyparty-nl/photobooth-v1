#region PhotoBooth - MIT - (c) 2014 Patrick Bronneberg
/*
  PhotoBooth - an application to control a DIY photobooth

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.
  
  Copyright 2014 Patrick Bronneberg
*/
#endregion

using System.Text.RegularExpressions;
using LibGPhoto2;
using Microsoft.Extensions.Logging;

namespace com.prodg.photobooth.infrastructure.hardware
{

	public class CameraInfo
	{
		public string Id {get;}

		public string Model {get;}

		public string Status {get;}

		public CameraInfo(string id, string model, string status)
		{
			Id = id;
			Model = model;
			Status = status;
		}
	}

	public class GPhotoCameraProvider
	{
		private IContext? _context;
		private LibGPhoto2.ICamera? _camera;
		private readonly ILogger<GPhotoCameraProvider> _logger;
		private bool _initialized;
		private const string CameraBaseFolder = @"/";

		public string Id { get; private set; }

		public CameraInfo Info {get; private set;}

		public string Initialized => _initialized;

		public Camera(ILogger<Camera> logger)
		{
            logger.LogDebug("Creating camera interface");
            _logger = logger;
			_initialized = false;
            _deinitRequested = false;
		}

		public void Initialize ()
		{
		    if (_initialized) return;

            _logger.LogInformation("Initializing GPhoto camera");
		    
		    //Initialize GPhoto2
		    _context = new Context();
		    _camera = new LibGPhoto2.Camera();
		    _camera.Init(_context);
		
			//Populate metadata
			CameraAbilities abilities = _camera.GetAbilities();
			Info = new CameraInfo(abilities.id, abilities.model, abilities.status);
			Id = abilities.model;

			_initialized = true;
			
		}

	    /// <remarks>In all cases that no value can be retrieved a default battery level is returned which
	    /// indicates a full battery. rationale is that in this case manual checking is needed, and the
	    /// software should work without issues</remarks>
        private int GetBatteryLevel()
	    {
            var summary = _camera.GetSummary(_context).Text;

	        using (var reader = new StringReader(summary))
	        {
	            string? line;
	            while ((line = reader.ReadLine()) != null)
	            {
	                if (!line.Contains("Battery")) continue;

	                Regex regex = new Regex(@"^.+value\: (?<level>\d+)\%.*");
	                Match match = regex.Match(line);

	                if (!match.Success) return DefaultBatteryLevel;

	                try
	                {
	                    return Convert.ToInt32(match.Groups["level"].Value);
	                }
	                catch (Exception ex)
	                {
	                    _logger.LogDebug(ex, "no match found for battery level");
	                    return DefaultBatteryLevel;
	                }
	            }
	        }
	        return DefaultBatteryLevel;
	    }

	    public bool Capture(string capturePath)
	    {
	        _logger.LogDebug("Starting capture");
	      
	        try
	        {
                //Capture and download
			    ICameraFilePath path = _camera.Capture(CameraCaptureType.Image, _context);
	            _logger.LogDebug("Capture finished. File {File}", Path.Combine(path.folder, path.name));
	            ICameraFile cameraFile = _camera.GetFile(path.folder, path.name,
	                CameraFileType.Normal,
	                _context);
                _logger.LogInformation("Saving file to {CapturePath}", capturePath);
	            cameraFile.Save(capturePath);
                 //Remove the file from the camera buffer
	            _camera.DeleteFile(path.folder, path.name, _context);
	            return true;
	        }
	        catch (Exception exception)
	        {
		        _logger.LogError(exception, "Camera capture failed");
	            return false;
	        }
	    
		}

	    public void Clean ()
		{
	        //Try to delete all images on the camera
            _camera.DeleteAll(CameraBaseFolder, _context);

            //Deinitialize to fix slow reponse issues after multiple sessions
            DisposeCameraObjects();
			_initialized = false;
		}

		#region IDisposable Implementation

		bool _disposed;

		public void Dispose ()
		{
			Dispose (true);
			GC.SuppressFinalize (this);
		}

		private void Dispose (bool disposing)
		{
			if (_disposed) return;
			if (disposing) {
				// Clean up managed objects
					
			}
			// clean up any unmanaged objects
			DisposeCameraObjects();
			_disposed = true;
		}

	    private void DisposeCameraObjects()
	    {
	        try
	        {
	            lock (_cameraLock)
	            {
		            try
	                {
		                _camera.Exit(_context);
	                }
	                catch (Exception)
	                {
		                _logger.LogWarning("Could not Exit camera from context");
	                }
	                _camera?.Dispose();

	                _context?.Dispose();
	            }
	        }
	        catch (Exception ex)
	        {
	            _logger.LogError(ex, "Exception while disposing camera objects");
	        }
	    }

	    ~Camera ()
		{
			Dispose (false);
		}
		
		#endregion
    }
}
