/* 
 * ItsMyParty.Photobooth.API
 *
 * ItsMyParty.Photobooth.API (ASP.NET Core 2.0)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace ItsMyParty.Photobooth.Client
{
    /// <summary>
    /// SessionDTO
    /// </summary>
    [DataContract]
    public partial class SessionDTO :  IEquatable<SessionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDTO" /> class.
        /// </summary>
        /// <param name="Collage">Base64 encoded collage.</param>
        /// <param name="Id">Gets or Sets Id.</param>
        /// <param name="Version">Gets or Sets Version.</param>
        /// <param name="Index">Gets or Sets Index.</param>
        /// <param name="EventId">Gets or Sets EventId.</param>
        /// <param name="Timestamp">Gets or Sets Timestamp.</param>
        /// <param name="AllowShare">Gets or Sets AllowShare.</param>
        public SessionDTO(string Collage = default(string), long? Id = default(long?), long? Version = default(long?), int? Index = default(int?), long? EventId = default(long?), DateTime? Timestamp = default(DateTime?), bool? AllowShare = default(bool?))
        {
            this.Collage = Collage;
            this.Id = Id;
            this.Version = Version;
            this.Index = Index;
            this.EventId = EventId;
            this.Timestamp = Timestamp;
            this.AllowShare = AllowShare;
        }
        
        /// <summary>
        /// Base64 encoded collage
        /// </summary>
        /// <value>Base64 encoded collage</value>
        [DataMember(Name="collage", EmitDefaultValue=false)]
        public string Collage { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <value>Gets or Sets Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        /// <value>Gets or Sets Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        /// <value>Gets or Sets Index</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        /// <value>Gets or Sets EventId</value>
        [DataMember(Name="eventId", EmitDefaultValue=false)]
        public long? EventId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        /// <value>Gets or Sets Timestamp</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets AllowShare
        /// </summary>
        /// <value>Gets or Sets AllowShare</value>
        [DataMember(Name="allowShare", EmitDefaultValue=false)]
        public bool? AllowShare { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionDTO {\n");
            sb.Append("  Collage: ").Append(Collage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AllowShare: ").Append(AllowShare).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SessionDTO);
        }

        /// <summary>
        /// Returns true if SessionDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Collage == other.Collage ||
                    this.Collage != null &&
                    this.Collage.Equals(other.Collage)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Index == other.Index ||
                    this.Index != null &&
                    this.Index.Equals(other.Index)
                ) && 
                (
                    this.EventId == other.EventId ||
                    this.EventId != null &&
                    this.EventId.Equals(other.EventId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.AllowShare == other.AllowShare ||
                    this.AllowShare != null &&
                    this.AllowShare.Equals(other.AllowShare)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Collage != null)
                    hash = hash * 59 + this.Collage.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Index != null)
                    hash = hash * 59 + this.Index.GetHashCode();
                if (this.EventId != null)
                    hash = hash * 59 + this.EventId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.AllowShare != null)
                    hash = hash * 59 + this.AllowShare.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
