/* 
 * ItsMyParty.Photobooth.API
 *
 * ItsMyParty.Photobooth.API (ASP.NET Core 2.0)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace ItsMyParty.Photobooth.Client
{
    /// <summary>
    /// ShotDTO
    /// </summary>
    [DataContract]
    public partial class ShotDTO :  IEquatable<ShotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShotDTO" /> class.
        /// </summary>
        /// <param name="Image">Base64 Encoded image.</param>
        /// <param name="Id">Gets or Sets Id.</param>
        /// <param name="Version">Gets or Sets Version.</param>
        /// <param name="SessionId">Gets or Sets the session id reference.</param>
        /// <param name="Index">Gets or Sets Index.</param>
        /// <param name="IsCollage">IsCollage.</param>
        public ShotDTO(string Image = default(string), long? Id = default(long?), long? Version = default(long?), long? SessionId = default(long?), int? Index = default(int?), bool? IsCollage = default(bool?))
        {
            this.Image = Image;
            this.Id = Id;
            this.Version = Version;
            this.SessionId = SessionId;
            this.Index = Index;
            this.IsCollage = IsCollage;
        }
        
        /// <summary>
        /// Base64 Encoded image
        /// </summary>
        /// <value>Base64 Encoded image</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <value>Gets or Sets Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        /// <value>Gets or Sets Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Gets or Sets the session id reference
        /// </summary>
        /// <value>Gets or Sets the session id reference</value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public long? SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        /// <value>Gets or Sets Index</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets IsCollage
        /// </summary>
        [DataMember(Name="isCollage", EmitDefaultValue=false)]
        public bool? IsCollage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShotDTO {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsCollage: ").Append(IsCollage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ShotDTO);
        }

        /// <summary>
        /// Returns true if ShotDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ShotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShotDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Image == other.Image ||
                    this.Image != null &&
                    this.Image.Equals(other.Image)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.SessionId == other.SessionId ||
                    this.SessionId != null &&
                    this.SessionId.Equals(other.SessionId)
                ) && 
                (
                    this.Index == other.Index ||
                    this.Index != null &&
                    this.Index.Equals(other.Index)
                ) && 
                (
                    this.IsCollage == other.IsCollage ||
                    this.IsCollage != null &&
                    this.IsCollage.Equals(other.IsCollage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Image != null)
                    hash = hash * 59 + this.Image.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.SessionId != null)
                    hash = hash * 59 + this.SessionId.GetHashCode();
                if (this.Index != null)
                    hash = hash * 59 + this.Index.GetHashCode();
                if (this.IsCollage != null)
                    hash = hash * 59 + this.IsCollage.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
