/* 
 * ItsMyParty.Photobooth.API
 *
 * ItsMyParty.Photobooth.API (ASP.NET Core 2.0)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EventDTO
    /// </summary>
    [DataContract]
    public partial class EventDTO :  IEquatable<EventDTO>, IValidatableObject
    {
        /// <summary>
        /// Event Status
        /// </summary>
        /// <value>Event Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UpcomingEnum for "UpcomingEnum"
            /// </summary>
            [EnumMember(Value = "UpcomingEnum")]
            UpcomingEnum,
            
            /// <summary>
            /// Enum CurrentEnum for "CurrentEnum"
            /// </summary>
            [EnumMember(Value = "CurrentEnum")]
            CurrentEnum,
            
            /// <summary>
            /// Enum CancelledEnum for "CancelledEnum"
            /// </summary>
            [EnumMember(Value = "CancelledEnum")]
            CancelledEnum,
            
            /// <summary>
            /// Enum CompletedEnum for "CompletedEnum"
            /// </summary>
            [EnumMember(Value = "CompletedEnum")]
            CompletedEnum
        }

        /// <summary>
        /// Event Status
        /// </summary>
        /// <value>Event Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventDTO" /> class.
        /// </summary>
        /// <param name="Logo">Base64 encoded Logo.</param>
        /// <param name="SessionCount">The number of sessions in the event.</param>
        /// <param name="Status">Event Status.</param>
        /// <param name="Id">Gets or Sets Id.</param>
        /// <param name="Version">Gets or Sets Version.</param>
        /// <param name="Name">Gets or Sets Name.</param>
        /// <param name="Description">Gets or Sets Description.</param>
        /// <param name="Date">Gets or Sets Date.</param>
        /// <param name="IsPublic">IsPublic.</param>
        public EventDTO(string Logo = default(string), int? SessionCount = default(int?), StatusEnum? Status = default(StatusEnum?), long? Id = default(long?), long? Version = default(long?), string Name = default(string), string Description = default(string), DateTime? Date = default(DateTime?), bool? IsPublic = default(bool?))
        {
            this.Logo = Logo;
            this.SessionCount = SessionCount;
            this.Status = Status;
            this.Id = Id;
            this.Version = Version;
            this.Name = Name;
            this.Description = Description;
            this.Date = Date;
            this.IsPublic = IsPublic;
        }
        
        /// <summary>
        /// Base64 encoded Logo
        /// </summary>
        /// <value>Base64 encoded Logo</value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public string Logo { get; set; }

        /// <summary>
        /// The number of sessions in the event
        /// </summary>
        /// <value>The number of sessions in the event</value>
        [DataMember(Name="sessionCount", EmitDefaultValue=false)]
        public int? SessionCount { get; set; }


        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <value>Gets or Sets Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        /// <value>Gets or Sets Version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public long? Version { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <value>Gets or Sets Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /// <value>Gets or Sets Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        /// <value>Gets or Sets Date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventDTO {\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EventDTO);
        }

        /// <summary>
        /// Returns true if EventDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of EventDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Logo == other.Logo ||
                    this.Logo != null &&
                    this.Logo.Equals(other.Logo)
                ) && 
                (
                    this.SessionCount == other.SessionCount ||
                    this.SessionCount != null &&
                    this.SessionCount.Equals(other.SessionCount)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.IsPublic == other.IsPublic ||
                    this.IsPublic != null &&
                    this.IsPublic.Equals(other.IsPublic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Logo != null)
                    hash = hash * 59 + this.Logo.GetHashCode();
                if (this.SessionCount != null)
                    hash = hash * 59 + this.SessionCount.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.IsPublic != null)
                    hash = hash * 59 + this.IsPublic.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
