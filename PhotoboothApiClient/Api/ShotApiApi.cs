/* 
 * ItsMyParty.Photobooth.API
 *
 * ItsMyParty.Photobooth.API (ASP.NET Core 2.0)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using ItsMyParty.Photobooth.Client;
using RestSharp;

namespace ItsMyParty.Photobooth.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IShotApiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>ShotDTO</returns>
        ShotDTO CreateEventSessionShot (long? eventId, int? sessionIndex, ShotDTO shot = null);

        /// <summary>
        /// Create a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        ApiResponse<ShotDTO> CreateEventSessionShotWithHttpInfo (long? eventId, int? sessionIndex, ShotDTO shot = null);
        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ShotDTO</returns>
        ShotDTO GetSessionShot (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null);

        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        ApiResponse<ShotDTO> GetSessionShotWithHttpInfo (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null);
        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ShotDTO</returns>
        ShotDTO GetSessionShots (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null);

        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        ApiResponse<ShotDTO> GetSessionShotsWithHttpInfo (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null);
        /// <summary>
        /// Retrieve a shot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>ShotDTO</returns>
        ShotDTO GetShot (long? shotId);

        /// <summary>
        /// Retrieve a shot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        ApiResponse<ShotDTO> GetShotWithHttpInfo (long? shotId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>Task of ShotDTO</returns>
        System.Threading.Tasks.Task<ShotDTO> CreateEventSessionShotAsync (long? eventId, int? sessionIndex, ShotDTO shot = null);

        /// <summary>
        /// Create a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShotDTO>> CreateEventSessionShotAsyncWithHttpInfo (long? eventId, int? sessionIndex, ShotDTO shot = null);
        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ShotDTO</returns>
        System.Threading.Tasks.Task<ShotDTO> GetSessionShotAsync (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null);

        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShotDTO>> GetSessionShotAsyncWithHttpInfo (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null);
        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ShotDTO</returns>
        System.Threading.Tasks.Task<ShotDTO> GetSessionShotsAsync (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null);

        /// <summary>
        /// Retrieve a shot for a session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShotDTO>> GetSessionShotsAsyncWithHttpInfo (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null);
        /// <summary>
        /// Retrieve a shot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>Task of ShotDTO</returns>
        System.Threading.Tasks.Task<ShotDTO> GetShotAsync (long? shotId);

        /// <summary>
        /// Retrieve a shot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShotDTO>> GetShotAsyncWithHttpInfo (long? shotId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ShotApiApi : IShotApiApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ShotApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ShotApiApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShotApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ShotApiApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>ShotDTO</returns>
        public ShotDTO CreateEventSessionShot (long? eventId, int? sessionIndex, ShotDTO shot = null)
        {
             ApiResponse<ShotDTO> localVarResponse = CreateEventSessionShotWithHttpInfo(eventId, sessionIndex, shot);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        public ApiResponse< ShotDTO > CreateEventSessionShotWithHttpInfo (long? eventId, int? sessionIndex, ShotDTO shot = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ShotApiApi->CreateEventSessionShot");
            // verify the required parameter 'sessionIndex' is set
            if (sessionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sessionIndex' when calling ShotApiApi->CreateEventSessionShot");

            var localVarPath = "/api/v1/events/{eventId}/sessions/{sessionIndex}/shots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sessionIndex != null) localVarPathParams.Add("sessionIndex", Configuration.ApiClient.ParameterToString(sessionIndex)); // path parameter
            if (shot != null && shot.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shot); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shot; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventSessionShot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

        /// <summary>
        /// Create a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>Task of ShotDTO</returns>
        public async System.Threading.Tasks.Task<ShotDTO> CreateEventSessionShotAsync (long? eventId, int? sessionIndex, ShotDTO shot = null)
        {
             ApiResponse<ShotDTO> localVarResponse = await CreateEventSessionShotAsyncWithHttpInfo(eventId, sessionIndex, shot);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shot">the shot (optional)</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShotDTO>> CreateEventSessionShotAsyncWithHttpInfo (long? eventId, int? sessionIndex, ShotDTO shot = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ShotApiApi->CreateEventSessionShot");
            // verify the required parameter 'sessionIndex' is set
            if (sessionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sessionIndex' when calling ShotApiApi->CreateEventSessionShot");

            var localVarPath = "/api/v1/events/{eventId}/sessions/{sessionIndex}/shots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sessionIndex != null) localVarPathParams.Add("sessionIndex", Configuration.ApiClient.ParameterToString(sessionIndex)); // path parameter
            if (shot != null && shot.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(shot); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shot; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventSessionShot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ShotDTO</returns>
        public ShotDTO GetSessionShot (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null)
        {
             ApiResponse<ShotDTO> localVarResponse = GetSessionShotWithHttpInfo(eventId, sessionIndex, shotIndex, thumbnail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        public ApiResponse< ShotDTO > GetSessionShotWithHttpInfo (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ShotApiApi->GetSessionShot");
            // verify the required parameter 'sessionIndex' is set
            if (sessionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sessionIndex' when calling ShotApiApi->GetSessionShot");
            // verify the required parameter 'shotIndex' is set
            if (shotIndex == null)
                throw new ApiException(400, "Missing required parameter 'shotIndex' when calling ShotApiApi->GetSessionShot");

            var localVarPath = "/api/v1/events/{eventId}/sessions/{sessionIndex}/shots/{shotIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sessionIndex != null) localVarPathParams.Add("sessionIndex", Configuration.ApiClient.ParameterToString(sessionIndex)); // path parameter
            if (shotIndex != null) localVarPathParams.Add("shotIndex", Configuration.ApiClient.ParameterToString(shotIndex)); // path parameter
            if (thumbnail != null) localVarQueryParams.Add("thumbnail", Configuration.ApiClient.ParameterToString(thumbnail)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionShot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ShotDTO</returns>
        public async System.Threading.Tasks.Task<ShotDTO> GetSessionShotAsync (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null)
        {
             ApiResponse<ShotDTO> localVarResponse = await GetSessionShotAsyncWithHttpInfo(eventId, sessionIndex, shotIndex, thumbnail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="shotIndex">the shot</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShotDTO>> GetSessionShotAsyncWithHttpInfo (long? eventId, int? sessionIndex, int? shotIndex, bool? thumbnail = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ShotApiApi->GetSessionShot");
            // verify the required parameter 'sessionIndex' is set
            if (sessionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sessionIndex' when calling ShotApiApi->GetSessionShot");
            // verify the required parameter 'shotIndex' is set
            if (shotIndex == null)
                throw new ApiException(400, "Missing required parameter 'shotIndex' when calling ShotApiApi->GetSessionShot");

            var localVarPath = "/api/v1/events/{eventId}/sessions/{sessionIndex}/shots/{shotIndex}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sessionIndex != null) localVarPathParams.Add("sessionIndex", Configuration.ApiClient.ParameterToString(sessionIndex)); // path parameter
            if (shotIndex != null) localVarPathParams.Add("shotIndex", Configuration.ApiClient.ParameterToString(shotIndex)); // path parameter
            if (thumbnail != null) localVarQueryParams.Add("thumbnail", Configuration.ApiClient.ParameterToString(thumbnail)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionShot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ShotDTO</returns>
        public ShotDTO GetSessionShots (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null)
        {
             ApiResponse<ShotDTO> localVarResponse = GetSessionShotsWithHttpInfo(eventId, sessionIndex, skip, limit, thumbnail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        public ApiResponse< ShotDTO > GetSessionShotsWithHttpInfo (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ShotApiApi->GetSessionShots");
            // verify the required parameter 'sessionIndex' is set
            if (sessionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sessionIndex' when calling ShotApiApi->GetSessionShots");

            var localVarPath = "/api/v1/events/{eventId}/sessions/{sessionIndex}/shots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sessionIndex != null) localVarPathParams.Add("sessionIndex", Configuration.ApiClient.ParameterToString(sessionIndex)); // path parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (thumbnail != null) localVarQueryParams.Add("thumbnail", Configuration.ApiClient.ParameterToString(thumbnail)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionShots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ShotDTO</returns>
        public async System.Threading.Tasks.Task<ShotDTO> GetSessionShotsAsync (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null)
        {
             ApiResponse<ShotDTO> localVarResponse = await GetSessionShotsAsyncWithHttpInfo(eventId, sessionIndex, skip, limit, thumbnail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a shot for a session 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of the event for which the session needs to be created</param>
        /// <param name="sessionIndex">Index of the session in the event for which the shot needs to be created</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="thumbnail"> (optional)</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShotDTO>> GetSessionShotsAsyncWithHttpInfo (long? eventId, int? sessionIndex, int? skip = null, int? limit = null, bool? thumbnail = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling ShotApiApi->GetSessionShots");
            // verify the required parameter 'sessionIndex' is set
            if (sessionIndex == null)
                throw new ApiException(400, "Missing required parameter 'sessionIndex' when calling ShotApiApi->GetSessionShots");

            var localVarPath = "/api/v1/events/{eventId}/sessions/{sessionIndex}/shots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (sessionIndex != null) localVarPathParams.Add("sessionIndex", Configuration.ApiClient.ParameterToString(sessionIndex)); // path parameter
            if (skip != null) localVarQueryParams.Add("skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (thumbnail != null) localVarQueryParams.Add("thumbnail", Configuration.ApiClient.ParameterToString(thumbnail)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSessionShots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

        /// <summary>
        /// Retrieve a shot 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>ShotDTO</returns>
        public ShotDTO GetShot (long? shotId)
        {
             ApiResponse<ShotDTO> localVarResponse = GetShotWithHttpInfo(shotId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a shot 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>ApiResponse of ShotDTO</returns>
        public ApiResponse< ShotDTO > GetShotWithHttpInfo (long? shotId)
        {
            // verify the required parameter 'shotId' is set
            if (shotId == null)
                throw new ApiException(400, "Missing required parameter 'shotId' when calling ShotApiApi->GetShot");

            var localVarPath = "/api/v1/shots/{shotId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shotId != null) localVarPathParams.Add("shotId", Configuration.ApiClient.ParameterToString(shotId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

        /// <summary>
        /// Retrieve a shot 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>Task of ShotDTO</returns>
        public async System.Threading.Tasks.Task<ShotDTO> GetShotAsync (long? shotId)
        {
             ApiResponse<ShotDTO> localVarResponse = await GetShotAsyncWithHttpInfo(shotId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a shot 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shotId">the shot</param>
        /// <returns>Task of ApiResponse (ShotDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShotDTO>> GetShotAsyncWithHttpInfo (long? shotId)
        {
            // verify the required parameter 'shotId' is set
            if (shotId == null)
                throw new ApiException(400, "Missing required parameter 'shotId' when calling ShotApiApi->GetShot");

            var localVarPath = "/api/v1/shots/{shotId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shotId != null) localVarPathParams.Add("shotId", Configuration.ApiClient.ParameterToString(shotId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShotDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ShotDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShotDTO)));
        }

    }
}
